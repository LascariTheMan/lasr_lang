/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.generator

import com.google.gson.FieldNamingPolicy
import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import dk.sdu.mdsd.lasr_lang.Agent
import dk.sdu.mdsd.lasr_lang.Intent
import dk.sdu.mdsd.lasr_lang.KeyValue
import dk.sdu.mdsd.lasr_lang.Parameters
import dk.sdu.mdsd.lasr_lang.TrainingPhrases
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Lasr_langGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val gson = new GsonBuilder().setPrettyPrinting().serializeNulls().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create()
		val httpRequest = new HttpRequest
		val agentJSON = new JsonObject
		val intentJSON = new JsonObject
		
		resource.allContents.filter(Agent).forEach[generateAgentJSON(agentJSON)]
		resource.allContents.filter(Intent).forEach[generateIntentJSON(intentJSON)]
		println(gson.toJson(agentJSON))
		println(gson.toJson(intentJSON))
		
		httpRequest.allIntents
		httpRequest.createIntent(intentJSON, gson)
		//resource.allContents.filter(EntityType).forEach[generateEntityTypeJSON]
	}
	 
	def generateAgentJSON(Agent agent, JsonObject obj) {
		var key = new String()
		var value = new Object()
	
		for(m : agent.values) {
			key = m.aa.toString()
			if(m.value.bool === null) {
				value = m.value.v.name
				obj.addProperty(key, value.toString)
			} else {
				value = Boolean.parseBoolean(m.value.bool)
				obj.addProperty(key, value.toString)
			}	
		}
	}
	
	def generateIntentJSON(Intent intent, JsonObject obj) {
		var key = new String()
		var value = new Object()
		obj.addProperty("displayName", intent.name)
		for (i : intent.values) {
			val raw_value = i.iv
			if (raw_value instanceof KeyValue) {
				key = raw_value.v 
				value = raw_value.name
				obj.addProperty(key, value.toString)
			} else if (raw_value instanceof TrainingPhrases) {
				generateTrainingPhrases(intent, obj, raw_value)			
			} else if (raw_value instanceof Parameters) {
				generateParameters(intent, obj, raw_value)
			}
		}
	}
	
	def generateTrainingPhrases(Intent intent, JsonObject obj, TrainingPhrases raw_value) {
		val key = "trainingPhrases"
		val values = new JsonArray
		for (phrase : raw_value.phrases) {
			val entry_phrase = new JsonObject
			val parts_key = "parts"
			val parts = new JsonArray
			for (part : phrase.sentences) {
				val json_part = new JsonObject
				val part_text_key = "text"
				var part_text_value = new String()
				if (part.entity !== null) {
					val entity_type_value = checkTypes(part.entity)
					json_part.addProperty("entityType", entity_type_value)
					json_part.addProperty("alias", part.entity)
				}
				for (word : part.words) {
					part_text_value = word.name + " "
				}
				json_part.addProperty(part_text_key, part_text_value)
				parts.add(json_part)
			}
			entry_phrase.add(parts_key, parts)
			values.add(entry_phrase)
		}
		obj.add(key, values)
	} 
	
	def String checkTypes(String entity) {
		if (entity.equals("givenName")) {
			return "@sys.given-name"
		} if (entity.equals("timePeriod")) {
			return "@sys.time-period"
		} if (entity.equals("date")) {
			return "@sys.date"
		}
		return entity
	}
	
	def generateParameters(Intent intent, JsonObject obj, Parameters raw_value) {
		val key = raw_value.v
		val values = new JsonArray
		for (parameter : raw_value.parameters) {
			val parameter_json = new JsonObject
			if (parameter.req !== null) {
				parameter_json.addProperty("mandatory", true)	
			} else {
				parameter_json.addProperty("mandatory", false)
			}
			parameter_json.addProperty("displayName", parameter.name)
			parameter_json.addProperty("entityTypeDisplayName", checkTypes(parameter.type))
			val prompt_key = "prompts"
			val prompt_values = new JsonArray
			for (prompt : parameter.prompts) {
				for (word : prompt.words) {
					prompt_values.add(word.name)
				}
			}
			parameter_json.add(prompt_key, prompt_values)
			values.add(parameter_json)
		}
		obj.add(key, values)
	}
	
	def generateEntityTypeJSON() {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
}